#!/usr/bin/env node
var UglifyJS = require('uglify-js');

process.chdir(__dirname);

var fs = require('fs');

function eachObj(obj, iter) {
  for ( var k in bundles ) {
    if ( obj.hasOwnProperty(k) ) {
      iter(obj[k], k);
    }
  }
}

function eachArr(arr, iter) {
  for ( var i = 0, ii = arr.length; i < ii; i++ ) {
    iter(arr[i], i);
  }
}

var p = JSON.parse(fs.readFileSync('../package.json'));

var full = 1,
    slim = 2,
    bundles = {};

bundles[full] = {};
bundles[slim] = {
  suffix: '-slim',
  type: '(slim, only works with precompiled templates)'
};

var files = [
      [ 'object'     , full | slim ],
      [ 'lib'        , full | slim ],
      [ 'nodes'      , full        ],
      [ 'runtime'    , full | slim ],
      [ 'lexer'      , full        ],
      [ 'parser'     , full        ],
      [ 'transformer', full        ],
      [ 'compiler'   , full        ],
      [ 'filters'    , full | slim ],
      [ 'globals'    , full | slim ],
      [ 'loader'     , full | slim ],
      [ 'web-loaders', full | slim ],
      [ 'loaders'    , full | slim ],
      [ 'environment', full | slim ]
    ];

function bundleFile(file) {
  var out = '(function() {\n';
  out += fs.readFileSync('../src/'+file+'.js', { encoding: 'utf8' })
    .replace(/require\(\W*([\w-]*)\W*\)/g, 'modules["$1"]')
    .replace(/module\.exports/g, 'modules[\''+file+'\']');
  out += '})();\n';
  return out;
}

function bundleIndex() {
  var out = fs.readFileSync('../index.js', { encoding: 'utf8' })
    .replace(/require\(\W*\.\/src\/([\w-]*)\W*\)/g, 'modules["$1"]')
    .replace(/module\.exports/g, 'nunjucks');
  out += '\n';
  return out;
}

function bundle(b) {
  var topComment = 'Browser bundle of nunjucks ' + p.version;
  if ( b.type ) {
    topComment += ' ' + b.type;
  }
  var out = '// ' + topComment;
  out += '\n\n(function() {\n';
  out += 'var modules = {};\n';

  eachArr(b.files, function(file) {
    out += bundleFile(file);
  });

  out += 'var nunjucks;\n';

  out += bundleIndex();

  out += '\
nunjucks.require = function(name) { return modules[name]; };\n\
\n\
if(typeof define === \'function\' && define.amd) {\n\
    define(function() { return nunjucks; });\n\
}\n\
else {\n\
    window.nunjucks = nunjucks;\n\
    if(typeof module !== \'undefined\') module.exports = nunjucks;\n\
}\n';

  out += '\n})();\n';

  out = {
    topComment: topComment,
    code: out
  };

  return out;
}

function uglify(bundle) {
  var compOpts = {
    dead_code: false,
    unused: false,
    side_effects: false,
    join_vars: false,
    conditionals: false,
    comparisons: false,
    booleans: false
  };
  var streamOpts = {
    comments: function(node, comment) {
      return comment.value.indexOf(bundle.topComment) != -1;
    }
  };
  var toplevel_ast = UglifyJS.parse(bundle.code);
  toplevel_ast.figure_out_scope();
  var compressor = UglifyJS.Compressor(compOpts);
  var compressed_ast = toplevel_ast.transform(compressor);
  var stream = UglifyJS.OutputStream(streamOpts);
  compressed_ast.print(stream);

  bundle.code = stream.toString();

  return bundle;
}

function saveBundle(b) {

  var suffix = b.suffix || '';

  b = bundle(b);

  fs.writeFileSync('../browser/nunjucks'+suffix+'.js', b.code);

  b = uglify(b);

  fs.writeFileSync('../browser/nunjucks'+suffix+'.min.js', b.code);

}

eachObj(bundles, function(b, k) {
  var bfiles = [];
  eachArr(files, function(file) {
    if ( file[1] & k ) bfiles.push( file[0] );
  });
  b.files = bfiles;

  saveBundle(b);
});
